#!/usr/bin/tclsh

proc ldextract {lddso} {
	#puts "EXTRACTING $lddso"
    set names ""
	foreach l [split $lddso \n] {
        set l [string trim $l]
        if { ![string match "*(0x*)" $l] && ![string match "*not found*" $l] } {
            continue
        }

        if { [string match "* => *(0x*)" $l] } {
            set name [lindex $l 0]
            #set ::ldmap($name) ""
			set filename [lindex $l 2]
			if { [string match "(0x*" $filename] } {
				set filename "<system>"
			}
            set ::ldfile($name) $filename
        } else {
            set name [lindex $l 0]
            set ::ldfile($name) ?$name
        }
        lappend names $name
    }

    return $names
}

proc display_ldmap_cur file {
    set fd [open "|tclsh [info script] $file" r]
    fconfigure $fd -buffering line
    while { [gets $fd l] >= 0 } {
        puts "\t-- $l"
    }
}

proc display_ldmap_pre file {
    if { [info exists ::ldcache($file)] } {
        #puts -nonewline $::ldcache($file)
        #return "$::ldcache($file)"
		return "(cached - see above)\n"
    }

    #set result [exec tclsh [info script] $file]
    set ::ldcache($file) ""
     if {
         [catch {
            set result [ldd3 $file]
            } caught] } {
         return "---$file--- ***ERROR: $caught ***\n"
     }
    set output ""
    foreach l [split $result \n] {
        #puts "\t-- $l"
        append output "\t -- $l\n"
    }

    set ::ldcache($file) $output
    return $output
}

proc ldd3 {args} {

	set output ""
	foreach file $args {
		if { [string index $file 0] == "?" } {
			return "--- NOT FOUND ---"
		}
    	if { [catch {set lddso [exec ldd $file 2>@stderr]} result] } {
    		set ldlist [ldextract $result]
    	} else {
    		set ldlist [ldextract $lddso]
    	}
    	#append output "(((LDD3 $file)))\n"

    	foreach l $ldlist {
    		set file $::ldfile($l)
    		if { $file == "not" } {
    			append output "$l: -------NOT-FOUND--------\n"
        	} else {
				append output "$l: $file"
				#puts "APPENDING ldmap for $file"
        		if { [info exists ::ldcache($file)] } {
        			append output " (cached)\n"
        		} else {
        			append output \n[display_ldmap_pre $file]
        		}
        	}
    	}
	}

	return $output
}

interp recursionlimit {} 100

puts [ldd3 {*}$argv]

